//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетСправочник(Парам01)","СуществуетСправочник","Когда существует справочник ""Companies""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетФорма(Парам01)","СуществуетФорма","И	существует форма ""ItemForm""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуСправочникаДляНовогоЭлемента(Парам01)","ЯОткрываюФормуСправочникаДляНовогоЭлемента","Тогда Я открываю форму ""Catalogs.Companies.Form.ItemForm"" для нового элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуСправочникаДляСуществующегоЭлемента(Парам01)","ЯОткрываюФормуСправочникаДляСуществующегоЭлемента","И	Я открываю форму ""Catalogs.Companies.Form.ItemForm"" для существующего элемента");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуСправочникаДляКопируемогоОбъекта(Парам01)","ЯОткрываюФормуСправочникаДляКопируемогоОбъекта","И	Я открываю форму ""Catalogs.Companies.Form.ItemForm"" для копируемого объекта");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуСправочникаФиктивноДляНовогоЭлемента(Парам01)","ЯОткрываюФормуСправочникаФиктивноДляНовогоЭлемента","И	Я открываю форму Справочника фиктивно ""Catalogs.Companies.Form.ItemForm"" для копируемого объекта");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюПроизвольнуюФорму(Парам01)","ЯОткрываюПроизвольнуюФорму","И	Я открываю произвольную форму ""Catalogs.Companies.Form.ListForm""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюПроизвольнуюФормуСИсключением(Парам01, Парам02)","ЯОткрываюПроизвольнуюФормуСИсключением","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюПроизвольнуюФормуСоСвойствомИЗначением(Парам01,Парам02,Парам03)","ЯОткрываюПроизвольнуюФормуСоСвойствомИЗначением","И	Я открываю произвольную форму ""Catalogs.Companies.Form.ListForm""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуСправочникаДляСуществующегоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя, ИмяСвойства, Значение)","ЯОткрываюФормуСправочникаДляСуществующегоЭлементаСоСвойствомИЗначением","");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокумент(Парам01)","СуществуетСправочник","Когда существует справочник ""Companies""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуДокументаДляНовогоЭлемента(Парам01)","ЯОткрываюФормуДокументаДляНовогоЭлементаСоСвойствомИЗначением","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуДокументаДляНовогоЭлементаСоСвойствомИЗначением(Парам01,Парам02,Парам03)","ЯОткрываюФормуДокументаДляНовогоЭлементаСоСвойствомИЗначением","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуДокументаДляСуществующегоЭлемента(Парам01)","ЯОткрываюФормуДокументаДляСуществующегоЭлементаСоСвойствомИЗначением","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуДокументаДляСуществующегоЭлементаСоСвойствомИЗначением(Парам01,Парам02,Парам03)","ЯОткрываюФормуДокументаДляСуществующегоЭлементаСоСвойствомИЗначением","");
	
	
	//ЯОткрываюФормуСправочникаДляСуществующегоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя, ИмяСвойства, Значение)
	
	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции


&НаКлиенте
Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы) Экспорт
//Процедура ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы, Модально = Ложь) Экспорт
	
	КлючВременнойФормы = "908насмь9ыв3245";
	//Если Модально Тогда
	//	ТестируемаяФорма = ОткрытьФормуМодально(ПолноеИмяФормы, ПараметрыФормы);
	//Иначе
		//ошибка ="";
		//Попытка
		
		// К сожалению здесь исключения не ловятся https://github.com/xDrivenDevelopment/xUnitFor1C/issues/154
		ТестируемаяФорма = ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы,, КлючВременнойФормы);
		
		//Исключение
		//	ошибка = ОписаниеОшибки();
		//	Предупреждение(" поймали исключение 20" + ошибка);
		//КонецПопытки;
	//КонецЕсли;
	Если ТестируемаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ТестируемаяФорма.Открыть(); // К сожалению здесь исключения не ловятся http://partners.v8.1c.ru/forum/thread.jsp?id=1080350#1080350
	Если ТестируемаяФорма.Открыта() = Ложь Тогда 
		ВызватьИсключение "ТестируемаяФорма """+ПолноеИмяФормы+""" не открылась, а должна была открыться"; 
	КонецЕсли;
		
	Если ТипЗнч(ТестируемаяФорма) = Тип("УправляемаяФорма") Тогда
		ТестируемаяФорма.ОбновитьОтображениеДанных();
	Иначе
			//Если ЭтоОбычнаяФорма(ТестируемаяФорма) Тогда
		ТестируемаяФорма.Обновить();
	КонецЕсли;
	
	ЗакрытьФорму(ТестируемаяФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, СсылочныйОбъект)
	ПараметрыФормы = Новый Структура("Key", СсылочныйОбъект);
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
КонецПроцедуры

Функция ПолучитьВидМетаданного(Мета_ПолноеИмя)
	СтрокаПоиска = ".форма.";
	Если Найти(Нрег(Мета_ПолноеИмя), СтрокаПоиска) = 0 Тогда 
		СтрокаПоиска = ".form.";
	КонецЕсли;	
	ИД = Лев(Мета_ПолноеИмя, Найти(НРег(Мета_ПолноеИмя), СтрокаПоиска)-1);	
	ИД = Сред(ИД, Найти(ИД, ".") + 1);
	Возврат ИД;
КонецФункции

Функция СоздатьЭлемент(ИД, Наименование, ПроверяемоеПравоДоступа = Неопределено)
	Элем = Справочники[ИД].СоздатьЭлемент();
	Мета = Элем.Метаданные();
	Если ПроверяемоеПравоДоступа <> Неопределено И НЕ ПравоДоступа(ПроверяемоеПравоДоступа, Мета) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Мета.ДлинаНаименования <> 0 Тогда
		Попытка
			Элем.Наименование = Наименование;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Мета.ДлинаКода <> 0 Тогда
		Элем.УстановитьНовыйКод();
	КонецЕсли;
	Элем.ОбменДанными.Загрузка = Истина;
	Элем.Записать();
	Возврат Элем;
КонецФункции

Функция СоздатьЭлементИВернутьСсылку(ИД, Наименование, ПроверяемоеПравоДоступа = Неопределено) Экспорт
	Элем = СоздатьЭлемент(ИД, Наименование, ПроверяемоеПравоДоступа);
	Возврат ?(Элем = Неопределено, Неопределено, Элем.Ссылка);
КонецФункции

&НаСервере
Функция ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);

	//ОсновнойОбъект = Объект();
	CоздаваемыйЭлемент = СоздатьЭлементИВернутьСсылку(ИД, "существующий");
	Возврат CоздаваемыйЭлемент;
КонецФункции

&НаКлиенте
Процедура ЗакрытьФорму(ТестируемаяФорма)
	//Если ТипЗнч(ТестируемаяФорма) <> Тип("Форма") и ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
	Если ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли; 
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие("ПередЗакрытием", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие("ПриЗакрытии", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка; 			
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = "";

КонецПроцедуры

&НаСервере
Функция ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя)
	ИД = ПолучитьВидМетаданного(Мета_ПолноеИмя);
	НужноИсключениеЕслиНеНайденоДокументов = Ложь;
	Док = ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, НужноИсключениеЕслиНеНайденоДокументов, "ТестДолжен_ОткрытьФормуСуществующегоДокумента");
	Возврат Док;
КонецФункции

Функция ПолучитьСуществующийДокументОбъектИВернутьСсылку(ИД, НужноИсключениеЕслиНеНайденоДокументов, ДопОписаниеДляИсключения)
	выборка = Документы[ИД].Выбрать(,,, "Дата Убыв");
	уcпешно = выборка.Следующий();
	Если Не уcпешно Тогда
		Если НужноИсключениеЕслиНеНайденоДокументов Тогда
			ВызватьИсключение ДопОписаниеДляИсключения + ": выборка.Следующий() - не найдено существующих документов! ";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Док = выборка.ПолучитьОбъект();
	Возврат Док.Ссылка;
КонецФункции



#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда существует справочник "Companies"
//@СуществуетСправочник(Парам01)
Процедура СуществуетСправочник(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
	
КонецПроцедуры

&НаКлиенте
//И	существует форма "ItemForm"
//@СуществуетФорма(Парам01)
Процедура СуществуетФорма(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда Я открываю форму "Catalogs.Companies.Form.ItemForm" для нового элемента
//@ЯОткрываюФормуДляНовогоЭлемента(Парам01)
Процедура ЯОткрываюФормуСправочникаДляНовогоЭлемента(Мета_ПолноеИмя) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры


&НаКлиенте
//Тогда Я открываю форму "Catalogs.Companies.Form.ItemForm" для нового элемента
//@ЯОткрываюФормуДляНовогоЭлемента(Парам01)
Процедура ЯОткрываюФормуСправочникаФиктивноДляНовогоЭлемента(Мета_ПолноеИмя) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, Неопределено);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры
//(Парам01,Парам02,Парам03)

&НаКлиенте
//Тогда Я открываю форму "Catalogs.Companies.Form.ItemForm" для нового элемента
//@ЯОткрываюФормуДляНовогоЭлемента(Парам01)
Процедура ЯОткрываюФормуСправочникаДляСуществующегоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя, ИмяСвойства="", Значение="") Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПараметрыФормы = Новый Структура("Key", ТестДолжен_ОткрытьФормуСуществующегоЭлементаСправочникаСервер(Мета_ПолноеИмя));
	Если НЕ ПустаяСтрока(ИмяСвойства) Тогда 
		ПараметрыФормы.Вставить(ИмяСвойства, Значение);
	КонецЕсли;
	
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И	Я открываю форму "Catalogs.Companies.Form.ItemForm" для существующего элемента
//@ЯОткрываюФормуДляСуществующегоЭлемента(Парам01)
Процедура ЯОткрываюФормуСправочникаДляСуществующегоЭлемента(Мета_ПолноеИмя) Экспорт
	ЯОткрываюФормуСправочникаДляСуществующегоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя);
КонецПроцедуры

&НаКлиенте
//И	Я открываю форму "Catalogs.Companies.Form.ItemForm" для копируемого объекта
//@ЯОткрываюФормуДляКопируемогоОбъекта(Парам01)
Процедура ЯОткрываюФормуСправочникаДляКопируемогоОбъекта(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";  //
КонецПроцедуры

&НаКлиенте
//И	Я открываю произвольную форму "Catalogs.Companies.Form.ListForm"
//@ЯОткрываюПроизвольнуюФорму(Парам01)
Процедура ЯОткрываюПроизвольнуюФорму(ПолноеИмяФормы) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ТестироватьФорму(ПолноеИмяФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
//И	Я открываю произвольную форму "Catalogs.Companies.Form.ListForm"
//@ЯОткрываюПроизвольнуюФорму(Парам01)
Процедура ЯОткрываюПроизвольнуюФормуСоСвойствомИЗначением(ПолноеИмяФормы, ИмяСвойства, Значение) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПараметрыФормы = Новый Структура("Key", Неопределено);
	ПараметрыФормы.Вставить(ИмяСвойства, Значение);
	ТестироватьФорму(ПолноеИмяФормы, ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
//Когда существует справочник "Companies"
//@СуществуетСправочник(Парам01)
Процедура СуществуетДокумент(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
	
КонецПроцедуры

&НаКлиенте
//Тогда Я открываю форму "Catalogs.Companies.Form.ItemForm" для нового элемента
//@ЯОткрываюФормуДляНовогоЭлемента(Парам01)
Процедура ЯОткрываюФормуДокументаДляНовогоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя, ИмяСвойства="", Значение="") Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПараметрыФормы = Новый Структура("Key", Неопределено);
	Если НЕ ПустаяСтрока(ИмяСвойства) Тогда 
		ПараметрыФормы.Вставить(ИмяСвойства, Значение);
	КонецЕсли;
	
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И	Я открываю форму "Catalogs.Companies.Form.ItemForm" для существующего элемента
//@ЯОткрываюФормуДляСуществующегоЭлемента(Парам01)
Процедура ЯОткрываюФормуДокументаДляСуществующегоЭлементаСоСвойствомИЗначением(Мета_ПолноеИмя, ИмяСвойства="", Значение="") Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	CоздаваемыйЭлемент = ТестДолжен_ОткрытьФормуСуществующегоЭлементаДокументаСервер(Мета_ПолноеИмя);
	ПараметрыФормы = Новый Структура("Key", CоздаваемыйЭлемент);
	Если НЕ ПустаяСтрока(ИмяСвойства) Тогда 
		ПараметрыФормы.Вставить(ИмяСвойства, Значение);
	КонецЕсли;
	
	ТестироватьФорму(Мета_ПолноеИмя, ПараметрыФормы);
	//ТестироватьФормуСсылочногоОбъекта(Мета_ПолноеИмя, CоздаваемыйЭлемент);
	
КонецПроцедуры


&НаКлиенте 
Процедура ЯОткрываюПроизвольнуюФормуСИсключением(ИмяФормы, СтрокаИсключения) Экспорт 
	
	Попытка
		ЯОткрываюПроизвольнуюФорму(ИмяФормы);
		ВызватьИсключение "Исключение при открытии нет "+СтрокаИсключения;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПодробноеОписание = ПодробноеПредставлениеОшибки(Ошибка);
		
		Если СтрНайти(ПодробноеОписание, СтрокаИсключения) = 0 Тогда
			ВызватьИсключение ПодробноеОписание;
		ИначеЕсли СтрНайти(ПодробноеОписание, "Исключение при открытии нет") > 0 Тогда 
			ВызватьИсключение ПодробноеОписание;
		КонецЕсли;
	    //ОписаниеОшибки()
	КонецПопытки; 
		
КонецПроцедуры
 
&AtClient
Procedure ГенерацияПоПодстемам(Command)
	МассивТекстов=Новый Массив;
	ГенерацияПоПодстемамAtServer(МассивТекстов);
	Для каждого Элемент Из МассивТекстов Цикл
		ТекстДок = Элемент["Текст"];
		ТекстДок.Показать(Элемент["Имя"], Элемент["Имя"] + ".feature");
	КонецЦикла;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для feature файлов";
	ДополнительныеПарам =  Новый Структура("МассивТекстов", МассивТекстов);
	ОповещениеОбВыборе = Новый ОписаниеОповещения("КаталогСохраненияФичЗавершение", ЭтотОбъект, ДополнительныеПарам);
	Диалог.Показать(ОповещениеОбВыборе);
	
EndProcedure

&НаКлиенте
Процедура КаталогСохраненияФичЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Каталог = ВыбранныеФайлы.Получить(0);
	
	ОповещениеОбЗаписи = Новый ОписаниеОповещения("ЗаписьФайлаЗавершение", ЭтотОбъект, Неопределено);
	
	Для каждого Элемент Из ДопПараметры["МассивТекстов"] Цикл
		ТекстДок = Элемент["Текст"];
		ТекстДок.НачатьЗапись(ОповещениеОбЗаписи, Каталог + "/"+ Элемент["Имя"] + ".feature", КодировкаТекста.UTF8);
	КонецЦикла; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьФайлаЗавершение(Результат, ДопПараметры) Экспорт
		
КонецПроцедуры
 
 

Процедура РекусривныйОбходСоставаПодсистем(Подсистема, МассивСостава)
	Для каждого Состав Из Подсистема.Состав Цикл
		МассивСостава.Добавить(Состав);		
	КонецЦикла;
	
	Для каждого СубПодсистема Из Подсистема.Подсистемы Цикл
		РекусривныйОбходСоставаПодсистем(СубПодсистема, МассивСостава);		
	КонецЦикла; 
		
КонецПроцедуры
 

&AtServer
Procedure ГенерацияПоПодстемамAtServer(МассивТекстов)
	
	МассивТекстов = Новый Массив;
	Для каждого Подсистема Из Метаданные.Подсистемы Цикл
		Состав = Новый Массив;
		РекусривныйОбходСоставаПодсистем(Подсистема, Состав);
		Сообщить(Подсистема.Имя);
		СоответствиеФорм = Новый Соответствие;
		СоответствиеФорм.Вставить("Имя", Подсистема.Имя);
		СоответствиеФорм.Вставить("Текст", Неопределено);
		//СоответствиеФорм.Вставить("Документы", Новый Соответствие);
		//СоответствиеФорм.Вставить("Прочие", Новый Соответствие);
		СоответствиеДублей = Новый Соответствие;
		
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку("# encoding: utf-8");
		Текст.ДобавитьСтроку("# language: ru");
		
		Текст.ДобавитьСтроку("@"+Подсистема.Имя);
		Текст.ДобавитьСтроку("@smoke");
		Текст.ДобавитьСтроку("");
		
		Текст.ДобавитьСтроку("Функционал: Тестирование открытия форм для подсистемы "+Подсистема.Имя);
		Текст.ДобавитьСтроку("	Как Разработчик
|	Я Хочу чтобы проверялось открытие формы всех элементов этой подсистемы
|	Чтобы я мог гарантировать работоспособность форм
|");
		
	
		Для каждого Элемент Из Состав Цикл
			Если СоответствиеДублей.Получить(Элемент) <> Неопределено Тогда
				Продолжить;				
			КонецЕсли;
			СоответствиеДублей.Вставить(Элемент, Истина);
			
			ЭтоСправочник = Метаданные.Справочники.Содержит(Элемент);
			Если ЭтоСправочник Тогда
				Если Элемент.Формы.Количество() = 0 Тогда
					Продолжить;					
				КонецЕсли;
				Текст.ДобавитьСтроку("	Сценарий: Открытие форм справочника "+Элемент.ПолноеИмя());
				
				МассивФорм = Новый Массив();
				Если Элемент.ОсновнаяФормаОбъекта <> Неопределено Тогда
					МассивФорм.Добавить(Элемент.ОсновнаяФормаОбъекта);
					Форма = Элемент.ОсновнаяФормаОбъекта; 
					Текст.ДобавитьСтроку("		Когда Я открываю форму справочника '"+Форма.ПолноеИмя()+"' для нового элемента");
					Текст.ДобавитьСтроку("		И Я открываю форму справочника '"+Форма.ПолноеИмя()+"'  для существующего элемента");					
				КонецЕсли; 
				
				Для каждого Форма Из Элемент.Формы Цикл
					Если МассивФорм.Найти(Форма) = Неопределено Тогда
						Текст.ДобавитьСтроку("		И	Я открываю произвольную форму '"+Форма.ПолноеИмя()+"'");						
					КонецЕсли; 
				КонецЦикла;
			ИначеЕсли Метаданные.Документы.Содержит(Элемент) Тогда 
				Если Элемент.Формы.Количество() = 0 Тогда
					Продолжить;					
				КонецЕсли;
				Текст.ДобавитьСтроку("	Сценарий: Открытие форм документа "+Элемент.ПолноеИмя());
				
				МассивФорм = Новый Массив();
				Если Элемент.ОсновнаяФормаОбъекта <> Неопределено Тогда
					МассивФорм.Добавить(Элемент.ОсновнаяФормаОбъекта);
					Форма = Элемент.ОсновнаяФормаОбъекта; 
					Текст.ДобавитьСтроку("		Когда Я открываю форму документа '"+Форма.ПолноеИмя()+"' для нового элемента");
					Текст.ДобавитьСтроку("		И Я открываю форму документа '"+Форма.ПолноеИмя()+"'  для существующего элемента");
				КонецЕсли; 
				
				Для каждого Форма Из Элемент.Формы Цикл
					Если МассивФорм.Найти(Форма) = Неопределено Тогда
						Текст.ДобавитьСтроку("		И	Я открываю произвольную форму '"+Форма.ПолноеИмя()+"'");						
					КонецЕсли; 
				КонецЦикла;
			Иначе
				Кол = 0;
				Попытка
					Кол = Элемент.Формы.Количество();
				Исключение
				    //ОписаниеОшибки()
				КонецПопытки;
				Если Кол > 0 Тогда
					Текст.ДобавитьСтроку("	Сценарий: Открытие форм объекта "+Элемент.ПолноеИмя());
					Для каждого Форма Из Элемент.Формы Цикл
						Текст.ДобавитьСтроку("		И	Я открываю произвольную форму '"+Форма.ПолноеИмя()+"'");						
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		СоответствиеФорм["Текст"]  = Текст;
		МассивТекстов.Добавить(СоответствиеФорм);
	КонецЦикла;
	
	
EndProcedure

//окончание текста модуля